package com.company.graphs;

import java.util.*;

// –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –æ—Ç –ú–æ—Å–∫–≤—ã –¥–æ –í–æ—Ä–æ–Ω–µ–∂–∞
public class GraphImpl implements IGraph {

    private final List<Vertex> vertexList;
    private final int[][] adjMatrix;

    String bestPath = "";
    int bestDistance = -1;

    void displayBestPath() {
        System.out.println("–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢: " + bestPath);
        System.out.println("–û–ë–©–ï–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï: " + bestDistance);
    }

    public GraphImpl(int maxVertexCount) {
        this.vertexList = new ArrayList<>(maxVertexCount);
        this.adjMatrix = new int[maxVertexCount][maxVertexCount];
        for (int i = 0; i < maxVertexCount; i++) {
            for (int j = 0; j < maxVertexCount; j++) {
                this.adjMatrix[i][j] = -1;
            }
        }
    }


    @Override
    public void addVertex(String label) {
        vertexList.add(new Vertex(label));
    }

    @Override
    public boolean addEdge(String startLabel, String SecondLabel, int distance, String... others) {
        boolean result = addEdge(startLabel, SecondLabel, distance);

        for (String other : others) {
            result &= addEdge(startLabel, other, distance);
        }

        return result;
    }

    @Override
    public boolean addEdge(String startLabel, String SecondLabel, int distance) {
        int startIndex = indexOf(startLabel);
        int endIndex = indexOf(SecondLabel);

        if (startIndex == -1 || endIndex == -1)
            return false;
        else {
            adjMatrix[startIndex][endIndex] = distance;
            adjMatrix[endIndex][startIndex] = distance;
        }
        return true;
    }


    // –ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –≤–µ—Ä—à–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    private int indexOf(String label) {
        for (int i = 0; i < vertexList.size(); i++) {
            if (vertexList.get(i).getLabel().equals(label))
                return i;
        }
        return -1;
    }


    @Override
    public int getSize() {
        return vertexList.size();
    }

    @Override
    public void display() {
        System.out.println(this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < getSize(); i++) {
            sb.append(vertexList.get(i));
            for (int j = 0; j < getSize(); j++) {
                if (adjMatrix[i][j] != -1) {
                    sb.append(" [" + adjMatrix[i][j] + "] -> ").append(vertexList.get(j));
                }
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    // –û–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É
    @Override
    public void dfs(String startLabel) {
        int startIndex = indexOf(startLabel);
        if (startIndex == -1) throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ " + startLabel);

        Stack<Vertex> stack = new Stack<>();
        Vertex vertex = vertexList.get(startIndex);

        visitVertex(stack, vertex);
        while (!stack.isEmpty()) {
            vertex = getNearUnvisitedVertex(stack.peek());
            if (vertex != null)
                visitVertex(stack, vertex);
            else stack.pop();
        }

    }

    // —á–∏—Å–ª–æ —Ä–µ–±–µ—Ä –¥–ª—è –≤–µ—Ä—à–∏–Ω—ã
    private int getEdgeCount(Vertex temp) {
        int currentIndex = indexOf(temp.getLabel());
        int count = 0;
        for (int i = 0; i < getSize(); i++) {
            if (adjMatrix[currentIndex][i] != -1)
                count++;
        }
        return count;
    }

    // –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏
    private int getDistance(String prevLabel, String currlabel) {
        int i = indexOf(prevLabel);
        int j = indexOf(currlabel);
        return adjMatrix[i][j];
    }

    // –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã
    private Vertex getNearUnvisitedVertex(Vertex vertex) {
        int currentIndex = vertexList.indexOf(vertex);
        for (int i = 0; i < getSize(); i++) {
            if (adjMatrix[currentIndex][i] != -1 && !vertexList.get(i).isVisited()) {
                return vertexList.get(i);
            }
        }
        return null;
    }


    private void visitVertex(Stack<Vertex> stack, Vertex vertex) {
        //     System.out.println(vertex.getLabel() + "");
        stack.push(vertex);
        vertex.setVisited(true);
    }

    private void visitVertex(Queue<Vertex> stack, Vertex vertex) {
        System.out.println(vertex.getLabel() + "");
        stack.add(vertex);
        vertex.setVisited(true);
    }

    @Override
    public void bfs(String startLabel) {
        int startIndex = indexOf(startLabel);
        if (startIndex == -1) throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ " + startLabel);

        Queue<Vertex> stack = new LinkedList<>();
        Vertex vertex = vertexList.get(startIndex);

        visitVertex(stack, vertex);
        while (!stack.isEmpty()) {
            vertex = getNearUnvisitedVertex(stack.peek());
            if (vertex != null)
                visitVertex(stack, vertex);
            else stack.remove();
        }

    }

    public static void main(String[] args) {
        GraphImpl graph = new GraphImpl(20);
        graph.addVertex("–ú–æ—Å–∫–≤–∞");
        graph.addVertex("–¢–∞–º–±–æ–≤");
        graph.addVertex("–†—è–∑–∞–Ω—å");
        graph.addVertex("–ö–∞–ª—É–≥–∞");
        graph.addVertex("–°–∞–º–∞—Ä–∞");
        graph.addVertex("–¢–≤–µ—Ä—å");
        graph.addVertex("–û—Ä–µ–ª");
        graph.addVertex("–í–æ—Ä–æ–Ω–µ–∂");

        graph.addEdge("–ú–æ—Å–∫–≤–∞", "–¢–∞–º–±–æ–≤", 100);
        graph.addEdge("–ú–æ—Å–∫–≤–∞", "–†—è–∑–∞–Ω—å", 40);
        graph.addEdge("–ú–æ—Å–∫–≤–∞", "–ö–∞–ª—É–≥–∞", 80);

        graph.addEdge("–¢–∞–º–±–æ–≤", "–°–∞–º–∞—Ä–∞", 80);
        graph.addEdge("–†—è–∑–∞–Ω—å", "–¢–≤–µ—Ä—å", 150);
        //   graph.addEdge("–†—è–∑–∞–Ω—å", "–û—Ä–µ–ª", 130);
        graph.addEdge("–ö–∞–ª—É–≥–∞", "–û—Ä–µ–ª", 120);

        graph.addEdge("–°–∞–º–∞—Ä–∞", "–í–æ—Ä–æ–Ω–µ–∂", 80);
        graph.addEdge("–¢–≤–µ—Ä—å", "–í–æ—Ä–æ–Ω–µ–∂", 60);
        graph.addEdge("–û—Ä–µ–ª", "–í–æ—Ä–æ–Ω–µ–∂", 40);
        //    graph.addEdge("–¢–∞–º–±–æ–≤", "–†—è–∑–∞–Ω—å", 30);

        //System.out.println("Graph size: " + graph.getSize());

        graph.searchPath("–ú–æ—Å–∫–≤–∞", "–í–æ—Ä–æ–Ω–µ–∂");       // –∏—â–µ–º –≤—Å–µ –ø—É—Ç–∏ –æ—Ç –ú–æ—Å–∫–≤—ã –¥–æ –í–æ—Ä–æ–Ω–µ–∂–∞
        graph.displayBestPath();// –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç (–∫—Ä–∞—Ç—á–∞–π—à–∏–π) –ú–æ—Å–∫–≤–∞ - –í–æ—Ä–æ–Ω–µ–∂
    }


    private void searchPath(String startLabel, String lastLabel) {
        int startIndex = indexOf(startLabel);
        int lastIndex = indexOf(lastLabel);
        if (startIndex == -1) throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ " + startLabel);
        if (lastIndex == -1) throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ " + lastLabel);

        Stack<Vertex> stack = new Stack<>();
        Vertex startVertex = vertexList.get(startIndex);
        Vertex currVertex = startVertex;

        visitVertex(stack, currVertex);
        String currPath = currVertex.getLabel(); // –ø—É—Ç—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏

        String prevLabel = "";// –∏–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã –≤ –ø—É—Ç–∏
        int distance = 0; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ

        while (!stack.isEmpty()) {
            if (currVertex != null) prevLabel = currVertex.getLabel();
            currVertex = getNearUnvisitedVertex(stack.peek());
            if (currVertex != null) {
                int d = getDistance(prevLabel, currVertex.getLabel());
                distance += d;
                currPath += "  üöó " + d + "  " + currVertex.getLabel();
                if (!currVertex.getLabel().equals(lastLabel)) {// –µ—Å–ª–∏ –Ω–µ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏ - –∏–¥–µ–º –¥–∞–ª—å—à–µ
                    visitVertex(stack, currVertex);
                } else {// –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
                    System.out.println(currPath);
                    System.out.println("–ò—Ç–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + distance + "\n");


                    currVertex.setVisited(false);//—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è —É –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏

                    while (stack.size() > 1) {// —á–∏—Å—Ç–∏–º —Å—Ç–µ–∫ –¥–æ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã
                        Vertex temp = stack.pop();
                    }


                    if (bestDistance == -1 || (bestDistance != -1 && bestDistance > distance)) {
                        bestDistance = distance;
                        bestPath = currPath;
                    }

                    currPath = startVertex.getLabel();
                    currVertex = startVertex;
                    distance = 0; // —Å–±—Ä–æ—Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –Ω–∞—á. –∏ –∫–æ–Ω–µ—á–Ω. —Ç–æ—á–∫–∞–º–∏
                }

            }//if (vertex != null)
            else stack.pop();// —Ç—É–ø–∏–∫, –∏—â–µ–º –¥—Ä—É–≥–æ–π –ø—É—Ç—å
        }//while (!stack.isEmpty())

    }

}
