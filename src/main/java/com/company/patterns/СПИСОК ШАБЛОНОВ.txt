Шаблонов много, но что-бы их понять, лучше пояснить для чего они нужны.

Строитель - для "ручного" создания объекта (вызывая нужные методы)
Фабрика - обычно статический метод создания сложных классов
Прототип - клонирование живого объекта

Заместитель - добавление своей логики в процесс (например логирование)
Декоратор - добавление своей логики без изменения логики работы старого или очень критичного класса
Адаптер - для соединения разных классов, адаптация одного класса для другого
Компоновщик - для управления дочерними классами одним методом
Мост - позволяет абстрактным методам (открыть, записать, закрыть и т.д.) работать в разных реализациях (windows, linux)
Фасад - позволяет одной командой проделать кучу специфической работы
Легковес - хранит в себе какие-то данные множества однотипных объектов, вместо того что-бы они сами хранили данные, тем самым экономит оперативную память

Стратегия - в зависимости от признака выполняет нужную стратегию
Команда - в зависимости от признака выполняет нужное действие
Цепочка обязанностей - добавление в процесс множества промежуточных действий (например фильтров)
Итератор - для обхода каждого элемента в списке
Посетитель - тоже что и Итератор но позволяет обработать каждый элемент
Наблюдатель - подписываемся на какое-нибудь событие происходящее с определенным объектом, для реагирования
Посредник - класс через который удобно работать с объектами в сложной системе
Шаблонный метод - абстрактный класс в котором заключены все возможные методы, реализуется в классе-потомке где можно переопределить методы
Снимок - текущее состояние объекта для сохранения/загрузки