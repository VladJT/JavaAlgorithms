package com.company.kotlin.rxjava

import io.reactivex.rxjava3.core.*
import io.reactivex.rxjava3.disposables.CompositeDisposable
import io.reactivex.rxjava3.disposables.Disposable
import io.reactivex.rxjava3.subjects.PublishSubject
import java.util.concurrent.TimeUnit
import kotlin.random.Random


class Sources {
    fun exec() {
        val observable = Producer()
        val observers = Consumer(observable)
        //    println("\n--execCompletable--")
        //    observer.execCompletable()

        //    println("\n--execSingle--")
        //     observer.execSingle()

        println("\n--execMaybe--")
        observers.execMaybe()

        println("\n--execHotObservable--")
        observers.execHotObservable()

        println("\n--execPublishSubject--")
        observers.execPublishSubject()

    }

    class Producer {
        fun randomResultOperation(): Boolean {
            Thread.sleep(Random.nextLong(1000))
            return listOf(true, false, true)[Random.nextInt(2)]
        }

        // Completable
        //–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–∞–º —Ñ–∞–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        //–∫–∞–∫–æ–π-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        //–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CompletableObserver, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π Observer, –Ω–æ –Ω–µ –∏–º–µ—é—â–∏–π onNext
        fun completable() = Completable.create { emitter ->
            randomResultOperation().let { res ->
                if (res) {
                    emitter.onComplete()
                } else {
                    emitter.onError(RuntimeException("Error"))
                    return@create
                }
            }
        }

        //Single
        //–ò—Å—Ç–æ—á–Ω–∏–∫ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω Observable, –æ–¥–Ω–∞–∫–æ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ. Single –∏–¥–µ–∞–ª—å–Ω–æ
        //–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ª—É—á–µ–Ω–∏–µ
        //–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–≥–æ —Ä–∞–±–æ—Ç—ã ‚Äî –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–±—ã—Ç–∏–µ. –í–º–µ—Å—Ç–æ onNext –∏ onComplete —É –µ–≥–æ
        //SingleObserver –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ onSuccess, –∏ –æ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π
        fun single() = Single.fromCallable {
            return@fromCallable "Some string value"
        }


        //Maybe
        //Maybe –ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –Ω–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–∫ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.
        //–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞—Å —É—Å—Ç—Ä–æ–∏—Ç
        //–∏ –Ω–∞–ª–∏—á–∏–µ, –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        //–ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω –≥–¥–µ-—Ç–æ –º–µ–∂–¥—É Completable –∏ Single. –ï–≥–æ MaybeObserver, –ø–æ–º–∏–º–æ onError –∏
        //onSubscribe, –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥—ã onSuccess –∏ onComplete. –û–±–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è ¬´—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–º–∏¬ª, –∏,
        //—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–º–∏. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π, –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –≤—Ç–æ—Ä–æ–π
        fun maybe() = Maybe.create { emitter ->
            randomResultOperation().let {
                if (it) {
                    emitter.onSuccess("üíª")
                } else {
                    emitter.onComplete()
                    return@create
                }
            }
        }

        //–ì–æ—Ä—è—á–∏–π Observable –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø–æ–¥–ø–∏—Å–∞–Ω –∫—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ –Ω–µ–≥–æ –∏–ª–∏ –Ω–µ—Ç
        fun hotObservable() =
            Observable.interval(1, TimeUnit.SECONDS)
                .publish()
        //–û—Ç–ª–∏—á–∏–µ –≤ —Ç–æ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –∫—ç—à–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä
        //–¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, –ø—Ä–∏—à–µ–¥—à–∏–µ –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–≥–¥–∞ –±—ã –æ–Ω –Ω–∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –ú–æ–∂–Ω–æ
        //–ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –ø–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π Observable, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫. –ù–∞—à
        //–∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Å—ë –µ—â—ë –≥–æ—Ä—è—á–∏–π –∏ –µ–≥–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ connect().
        // .replay()

        fun publishSubject() = PublishSubject.create<String>().apply {
            Observable.timer(2, TimeUnit.SECONDS)
                .subscribe {
                    onNext("Value from subject")
                }
        }
    }//Producer


    class Consumer(val producer: Producer) {
        private val disposables = CompositeDisposable()

        fun exec() {
        }

        fun execCompletable() {
            producer.completable()
                .subscribe(object : CompletableObserver {
                    override fun onSubscribe(d: Disposable) {
                        println("onSubscribe")
                    }

                    override fun onComplete() {
                        println("onComplete")
                    }

                    override fun onError(e: Throwable) {
                        println("onError ${e.message}")
                    }
                })
        }


        fun execSingle() {
            producer.single()
                .map { it + it }
                .subscribe({ s ->
                    println("onSuccess: $s")
                }, {
                    println("onError: ${it.message}")
                })
        }

        fun execMaybe() {
            producer.maybe()
                .subscribe({ s ->
                    println("onSuccess: $s")
                }, {
                    println("onError: ${it.message}")
                }, {
                    println("onComplete")
                })
        }

        fun execHotObservable() {
            val hotObservable = producer.hotObservable()
            hotObservable.subscribe {
                println("üê®‚Äç observer - $it")
            }
            hotObservable.connect()//—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É Observable. –ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç
            Thread.sleep(3000)
            hotObservable
                .subscribe {
                    println("üò∂Ô∏è observer - $it")
                }
            Thread.sleep(3000)

        }

        fun execPublishSubject() {
            val subject = producer.publishSubject()
            subject
                .subscribe({
                    println("onNext: $it")
                }, {
                    println("onError: ${it.message}")
                })
            subject.onNext("from exec")
        }
    }//Consumer
}
